app:
  title: RGT DevOps
  baseUrl: http://localhost:3000

organization:
  name: RGTDevOps

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: localhost
      port: 5432
      user: postgres
      password: ${DATABASE_PASSWORD}
      database: teamdeck

integrations:
  github:
    - host: github.com
      token: ${GITHUB_INTEGRATION_TOKEN}

techdocs:
  builder: 'local'
  generator:
    runIn: 'docker'
  publisher:
    type: 'local'

auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
        apps:
          - $include: github-app-backstage-teamdeck-rgt-devops-credentials.yaml
          - $include: github-app-teamdeck-app-credentials.yaml
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
    google:
      development:
        clientId: ${GOOGLE_CLIENT_ID}
        clientSecret: ${GOOGLE_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
  session:
    secret: ${AUTH_SESSION_SECRET}

scaffolder:

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: file
      target: ../../examples/entities.yaml
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../examples/groups.yaml
      rules:
        - allow: [User, Group]
    - type: file
      target: ../../examples/users.yaml
      rules:
        - allow: [User, Group]

kubernetes:

permission:
  enabled: true

github:
  installationId: ${GITHUB_INSTALLATION_ID}